{
  "languageSwitcher": {
    "english": "English",
    "french": "French",
    "ariaLabel": "Change language"
  },
  "navbar": {
    "brand": "Harry Viennot",
    "about": "About Me",
    "experience": "Experience",
    "projects": "Projects",
    "contact": "Contact",
    "github": "GitHub",
    "linkedin": "LinkedIn"
  },
  "hero": {
    "profileAlt": "Harry Viennot",
    "headline": "Harry Viennot",
    "subtitle": "Software Developer & DevOps Enthusiast",
    "downloadCV": "Download CV",
    "contactInfo": "Contact Info"
  },
  "about": {
    "title": "About Me",
    "description": "I'm a French software engineering student currently studying at McGill University, with a strong background from Epitech. My interests lie in system automation, DevOps, and building impactful digital tools. I enjoy working on challenging projects and believe in clean, efficient code backed by thoughtful design. I'm always eager to collaborate and learn from others."
  },
  "experience": {
    "title": "Work Experience",
    "readMore": "Read More",
    "bpce": {
      "title": "DevOps Intern",
      "company": "BPCE IT",
      "date": "Oct 2023 – June 2024",
      "description": "Worked on automating CI/CD pipelines and deploying infrastructure with Kubernetes. Participated in internal tooling enhancements and improved system performance monitoring.",
      "fullDescription": "As a DevOps intern at BPCE IT in Toulouse, I was part of the Guichet SI Établissements team within the Plateforme Privative division. My role was to assist with the automation and standardization of deployment chains for internal software like Adequasys and UAS. I contributed to the design and implementation of CI/CD pipelines, helped orchestrate service provisioning using MyCloud, and maintained infrastructure templates to streamline project creation. I worked closely with Jenkins, Bitbucket, Artifactory, and XLR/XLD, while adapting to an Agile work environment with frequent meetings and cross-functional collaboration.",
      "responsibilities": [
        "Automated provisioning of environments for internal applications using MyCloud and Jenkins",
        "Implemented reusable pipeline templates for XLRelease and Jenkins",
        "Developed and maintained Bitbucket repositories and Jenkinsfiles for deployment flows",
        "Orchestrated CI/CD flows with Jenkins, Artifactory, and Bitbucket",
        "Assisted with the Agile transition and participated in daily team coordination meetings"
      ],
      "achievements": [
        "Delivered a reusable deployment pipeline that standardized the setup of over 20 projects",
        "Reduced manual configuration time across projects by automating service provisioning",
        "Documented pipeline architecture and onboarding instructions for future team members"
      ]
    },
    "strategin": {
      "title": "Software Development Intern",
      "company": "Strateg.in",
      "date": "June 2023 – Sept 2023",
      "description": "Developed full-stack features for client applications using React and Node.js. Collaborated with design and product teams to implement responsive UI components.",
      "fullDescription": "During my internship at Strateg.in, a digital transformation company for SMEs, I worked on several projects including web platforms, ERPs, and a mobile app. I contributed to full stack development tasks, implemented key features such as dashboards, user progress tracking, and automated reports, and participated in agile ceremonies and code reviews. I also integrated APIs, handled deployments using Docker and Kubernetes, and helped design recommendation algorithms for user course suggestions.",
      "responsibilities": [
        "Fixed bugs and implemented PDF/Excel generation features in 'La Méthode Citoyenne' project",
        "Developed core functionalities in 'AEP Formation', including ERP modules, course status systems, and a recommendation algorithm",
        "Created user dashboards and login redirection logic for the web platform",
        "Tracked and modeled user course progress using custom APIs and database schema changes",
        "Worked on the 'Car Co' mobile app to implement bug fixes, event cancellation, and UI improvements"
      ],
      "achievements": [
        "Built a course recommendation algorithm based on user history and category matching",
        "Led development of user dashboards and ERP components in AEP Formation project",
        "Adapted quickly to multiple tech stacks including React, Next.js, and mobile app development",
        "Successfully transitioned from academic learning to a production-level developer workflow"
      ]
    },
    "airbusHackathon": {
      "title": "Hackathon",
      "company": "Airbus Innovation Week",
      "date": "March 2023",
      "description": "Participated in a 48-hour hackathon focused on sustainable aviation solutions. Developed a prototype for reducing carbon emissions through optimized flight planning.",
      "fullDescription": "I participated in the Airbus Innovation Week hackathon, where teams were challenged to develop innovative solutions for sustainable aviation. Our team of four created a prototype application that uses machine learning to optimize flight routes for fuel efficiency, potentially reducing carbon emissions.",
      "responsibilities": [
        "Led the frontend development of our prototype application",
        "Integrated with flight data APIs and mapping systems",
        "Presented our solution to a panel of judges from Airbus",
        "Collaborated with team members on algorithm development"
      ],
      "achievements": [
        "Won the 'Most Innovative Solution' award",
        "Demonstrated a potential 5% reduction in fuel consumption",
        "Successfully completed working prototype within the 48-hour timeframe"
      ]
    }
  },
  "projects": {
    "title": "Projects",
    "mirage": {
      "name": "Mirage",
      "duration": "March 2024 – Present",
      "github": null,
      "overview": "Mirage is a SaaS application that allows users to deploy, configure, and operate contextual AI agents within custom workspaces. The platform centralizes the management of connected services, files, and models to enhance team productivity.",
      "context": "This project was initiated to solve a recurring issue in companies: the siloing of information and the difficulty of leveraging AI in an integrated way. The idea was to create a modular platform that centralizes AI agent configuration, connects them to business tools, and contextualizes internal data. Audience: Technical administrators, customer support teams, internal developers.",
      "app": {
        "summary": "Users can create isolated workspaces to deploy AI agents configured with file context and service connections. Administrators can manage services (Slack, Jira, etc.) via OAuth, import documents for RAG, and configure AI models per workspace.",
        "screenshots": [
          {
            "url": "/screenshots/mirage-dashboard.png",
            "caption": "Super admin dashboard – Service card view"
          },
          {
            "url": "/screenshots/mirage-space-model.png",
            "caption": "Workspace page – Model tab for RAG configuration"
          },
          {
            "url": "/screenshots/mirage-service-form.png",
            "caption": "Service creation – Three-step form"
          }
        ]
      },
      "design": {
        "description": "Design Goals: Clean interface, SaaS dashboard style; Smooth and responsive navigation between pages; Consistent user experience for super admins and workspace admins. Process: I designed the mockups on Figma following a modular structure. Each page is divided into components: service cards, multi-section forms, space pages with tabs (chat, files, models, settings...).",
        "figma": null
      },
      "stack": {
        "frontend": ["Next.js", "React", "TypeScript", "Tailwind CSS"],
        "backend": ["Node.js", "FastAPI", "Redis", "PostgreSQL", "Prisma"],
        "devops": ["GitHub Actions", "Docker"],
        "ai": [
          "OpenAI API",
          "RAG (Retrieval-Augmented Generation)",
          "Langchain (upcoming)"
        ],
        "apis": [],
        "libraries": [],
        "tools": []
      },
      "architecture": {
        "text": "Structure: Mirage is organized as multi-tenant with isolated workspaces. Each space can manage its files, models, and service connections via OAuth2 connectors. Data Flow: User queries are handled server-side, enriched via a RAG engine based on imported files, then sent to OpenAI's API. Files are segmented and vectorized in advance.",
        "diagram": null
      },
      "challenges": [
        "Designing a flexible interface to handle various service types",
        "Integrating dynamic authentication configuration (OAuth2, static tokens...)",
        "Optimizing vectorization and contextual retrieval for the RAG system"
      ]
    },
    "moviematch": {
      "name": "Movie Match",
      "duration": "September 2022 – Present",
      "github": null,
      "overview": "Movie Match is a mobile app designed to help friends and families choose a movie to watch together. It combines a swiping system inspired by dating apps and real-time updates on swiped movies.",
      "context": "This project was born out of frustration from spending too much time choosing the perfect movie across streaming platforms. I wanted to gather all movies in one place and gamify the experience. It was also a way to improve my design skills and learn more about React Native animations and real-time data sync.",
      "app": {
        "summary": "The user starts a lobby by choosing available streaming platforms, and others can join using a game pin. Once connected, the admin starts the game and users select preferred genres. Movies are recommended based on the most compatible genre mix. Swiped-right movies are added to a playlist visible to all.",
        "screenshots": [
          {
            "url": "/screenshots/movie-match-lobby.png",
            "caption": "Lobby"
          }
        ]
      },
      "design": {
        "description": "I wanted a playful cinema-inspired ambiance. I chose a dark theme and game-like font. The movie card shows key info at a glance, with details like synopsis, platforms, and IMDb links on the flip side.",
        "figma": "https://www.figma.com/design/FemeYv6ANlWLGDvwfXAs7s/Movie-Match?node-id=0-1&t=Biku71eBnypPWQaR-1"
      },
      "stack": {
        "frontend": ["React Native", "Expo"],
        "backend": ["Python FastAPI", "MongoDB", "Firebase"],
        "apis": [
          "Streaming Availability (RapidAPI)",
          "TheMovieDatabase",
          "OMDB"
        ]
      },
      "architecture": {
        "text": "Text",
        "diagram": "/diagrams/movie-match.png"
      },
      "challenges": [
        "Combining multiple free or low-cost APIs to avoid IMDb's €300,000 license",
        "Designing an effective recommendation algorithm with limited data"
      ]
    },
    "botbutler": {
      "name": "BotButler",
      "duration": "January 2023 – Present",
      "github": null,
      "overview": "BotButler is an AI assistant platform that connects to internal tools (Slack, Jira, Notion, etc.) to automate workflows, provide contextual answers, and act proactively.",
      "context": "This tool was designed to help companies leverage internal data via AI while keeping control over permissions and tool connections. It's part of an AI-augmented productivity approach for distributed teams. Audience: SMEs, product teams, support teams, or any company using multiple SaaS tools with complex internal knowledge.",
      "app": {
        "summary": "Administrators can configure AI agents that connect to services via OAuth, ingest company documents for context, and define custom actions. Users interact with agents via Slack or web interfaces to get instant answers about internal documentation or trigger workflow actions.",
        "screenshots": [
          {
            "url": "/screenshots/botbutler-agent-view.png",
            "caption": "AI Agent view – connection status and logs"
          },
          {
            "url": "/screenshots/botbutler-action-config.png",
            "caption": "Custom action configuration for Jira and Slack"
          },
          {
            "url": "/screenshots/botbutler-context-editor.png",
            "caption": "Context editor – file ingestion and metadata"
          }
        ]
      },
      "design": {
        "description": "Design Goals: Create a minimalist interface where admins can manage each AI agent; Highlight active service connections (Slack, Jira...); Provide real-time visual feedback on AI queries. Process: I first mapped the conversational architecture and typical use cases (answering questions, triggering actions, returning files).",
        "figma": null
      },
      "stack": {
        "frontend": ["React", "TypeScript", "Tailwind CSS"],
        "backend": ["Node.js", "Express", "PostgreSQL"],
        "ai": [
          "OpenAI API",
          "Langchain (upcoming)",
          "Vector Stores (Pinecone, Redis)"
        ],
        "apis": ["Slack API", "Jira REST API", "OAuth 2.0", "Webhook Handlers"],
        "devops": [],
        "libraries": [],
        "tools": []
      },
      "architecture": {
        "text": "Structure: Each AI agent runs in an isolated environment with its own services, files, and logs. The central system manages OAuth, endpoint configuration, and vector sync. User queries go through a parser, RAG layer, then OpenAI. Data Flow: User submits a query via Slack or web. The agent checks permissions, retrieves context from a vector store, generates a response via OpenAI, and performs actions.",
        "diagram": null
      },
      "challenges": [
        "Implementing fine-grained permissions between agents, users, and services",
        "Maintaining consistent context-aware answers with long/ambiguous documents",
        "Ensuring OAuth and action security"
      ]
    },
    "switchecs": {
      "name": "Switchecs",
      "duration": "February 2022",
      "github": "https://github.com/harryviennot/switchecs",
      "overview": "Switchecs is an original online chess game where the board randomly flips, forcing players to constantly adapt their strategy.",
      "context": "This project was born from a 24-hour Epitech Game Jam challenge. The subject was \"black and white\" and was open to any interpretation. Our group of four decided to make a twist on the most popular black and white game: chess. We wanted to create a game that was fun and challenging, and that would be easy to play.",
      "app": {
        "summary": "Players engage in an online two-player chess match where every few moves, the board flips orientation. This forces players to reassess their strategy from a new perspective. The game tracks move history and ensures all chess rules are properly enforced despite the orientation changes.",
        "screenshots": [
          {
            "url": "/screenshots/switchecs-board.png",
            "caption": "Game board in session"
          },
          {
            "url": "/screenshots/switchecs-flip.png",
            "caption": "Board flip animation"
          },
          {
            "url": "/screenshots/switchecs-history.png",
            "caption": "Move history on right"
          }
        ]
      },
      "design": {
        "description": "As time was limited, we focused on the game mechanics and used an existing chessboard library. We wanted to keep the game simple and easy to play, so we didn't add too many features.",
        "figma": null
      },
      "stack": {
        "frontend": ["React", "JavaScript", "CSS Modules"],
        "backend": ["Express", "Socket.io"],
        "apis": [],
        "libraries": ["chess.js", "react-chessboard"],
        "tools": [],
        "devops": [],
        "ai": []
      },
      "architecture": {
        "text": "The game follows a client-server architecture. The client is a React app that uses the chessboard library to display the game. The server is an Express app that handles the game logic and the Socket.io connections.",
        "diagram": null
      },
      "challenges": [
        "Syncing game state with orientation changes",
        "Keeping interface intuitive despite visual flips",
        "Understanding Fen notation and rewriting all chess logic"
      ]
    }
  },
  "education": {
    "title": "Education",
    "mcgill": {
      "institution": "McGill University",
      "degree": "Certificate in Management",
      "year": "2024–2025",
      "description": "Exchange year focusing on strategic management and international business."
    },
    "epitech": {
      "institution": "Epitech – European Institute of Technology",
      "degree": "Master's in Software Engineering",
      "year": "2021–2026",
      "description": "Project-based learning with emphasis on collaboration, algorithms, systems, and software architecture."
    }
  },
  "extras": {
    "title": "Extras",
    "languages": {
      "title": "French (Native), English (Fluent), Spanish (Intermediate)",
      "category": "Languages",
      "description": "Comfortable working in multilingual environments"
    },
    "certification": {
      "title": "AWS Certified Developer Associate",
      "category": "Certification",
      "description": "Obtained in 2023"
    },
    "volunteer": {
      "title": "Tech Volunteer at CodeForAll",
      "category": "Volunteer",
      "description": "Teaching coding to underprivileged youth"
    }
  },
  "contact": {
    "title": "Contact Me",
    "getInTouch": "Get in Touch",
    "emailAddress": "harry.viennot@example.com",
    "githubHandle": "github.com/harryviennot",
    "linkedinHandle": "linkedin.com/in/harryviennot",
    "sendMessageTitle": "Send a Message",
    "form": {
      "nameLabel": "Name",
      "emailLabel": "Email",
      "messageLabel": "Message",
      "sendButton": "Send Message"
    }
  },
  "experienceDetailPage": {
    "notFound": {
      "title": "Experience not found",
      "message": "The experience you're looking for doesn't exist."
    },
    "backToExperience": "Back to Experience",
    "overviewTitle": "Overview",
    "responsibilitiesTitle": "Responsibilities",
    "toolsTitle": "Tools & Technologies",
    "achievementsTitle": "Key Achievements"
  },
  "projectDetailPage": {
    "notFound": {
      "title": "Project not found",
      "message": "The project you're looking for doesn't exist."
    },
    "backToProjects": "Back to Projects",
    "overviewTitle": "The App",
    "techStackTitle": "Tech Stack",
    "descriptionTitle": "Description",
    "screenshotsTitle": "Screenshots",
    "screenshotAltText": "{{projectName}} screenshot {{number}}",
    "linksTitle": "Links",
    "viewSourceGithub": "View source code on GitHub"
  },
  "app": {
    "loading": "Loading..."
  }
}
